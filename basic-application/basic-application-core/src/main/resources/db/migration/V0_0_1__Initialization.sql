create sequence Announcement_id_seq start with 1 increment by 50;
create sequence Authority_id_seq start with 1 increment by 50;
create sequence City_id_seq start with 1 increment by 50;
create sequence DataUpgradeRecord_id_seq start with 1 increment by 50;
create sequence HistoryDifference_id_seq start with 1 increment by 50;
create sequence HistoryLog_id_seq start with 1 increment by 50;
create sequence Parameter_id_seq start with 1 increment by 50;
create sequence QueuedTaskHolder_id_seq start with 1 increment by 50;
create sequence user__id_seq start with 1 increment by 50;
create sequence UserGroup_id_seq start with 1 increment by 50;
create table Announcement (id bigint not null, creation_date timestamp(6) with time zone not null, creation_subject_label varchar(255), creation_subject_reference_id bigint, creation_subject_reference_type varchar(255), creation_subject_serialized varchar(255), description_en varchar(255), description_fr varchar(255), enabled boolean not null, interruption_endDateTime timestamp(6), interruption_startDateTime timestamp(6), modification_date timestamp(6) with time zone not null, modification_subject_label varchar(255), modification_subject_reference_id bigint, modification_subject_reference_type varchar(255), modification_subject_serialized varchar(255), publication_endDateTime timestamp(6) not null, publication_startDateTime timestamp(6) not null, title_en varchar(255), title_fr varchar(255), type varchar(255) not null check (type in ('SERVICE_INTERRUPTION','OTHER')), primary key (id));
create table Authority (id bigint not null, name varchar(255), primary key (id));
create table Authority_customPermissionNames (Authority_id bigint not null, customPermissionNames varchar(255));
create table BasicUser (id bigint not null, primary key (id));
create table City (id bigint not null, deleteable boolean not null, disableable boolean not null, editable boolean not null, enabled boolean not null, position integer not null, label_en varchar(255), label_fr varchar(255), postalCode bytea not null, primary key (id), constraint UKcici6ao6snb79g0i2ebsix408 unique (label_fr, postalCode));
create table DataUpgradeRecord (id bigint not null, autoPerform boolean not null, done boolean not null, executionDate timestamp(6) with time zone, name varchar(255) not null, primary key (id), unique (name));
create table HistoryDifference (id bigint not null, after_label varchar(255), after_reference_id bigint, after_reference_type varchar(255), after_serialized varchar(255), before_label varchar(255), before_reference_id bigint, before_reference_type varchar(255), before_serialized varchar(255), eventType varchar(255) not null check (eventType in ('ADDED','UPDATED','REMOVED','UNTOUCHED')), path_key_label varchar(255), path_key_reference_id bigint, path_key_reference_type varchar(255), path_key_serialized varchar(255), path_path bytea not null, parentDifference_id bigint, parentLog_id bigint, differences_ORDER integer, primary key (id));
create table HistoryLog (id bigint not null, comment varchar(255), date timestamp(6) with time zone not null, eventType varchar(255) not null check (eventType in ('CREATE','UPDATE','DELETE','DISABLE','ENABLE','SIGN_IN','SIGN_IN_FAIL','PASSWORD_RESET_REQUEST','PASSWORD_CREATION_REQUEST','PASSWORD_UPDATE')), mainObject_label varchar(255), mainObject_reference_id bigint, mainObject_reference_type varchar(255), mainObject_serialized varchar(255), object1_label varchar(255), object1_reference_id bigint, object1_reference_type varchar(255), object1_serialized varchar(255), object2_label varchar(255), object2_reference_id bigint, object2_reference_type varchar(255), object2_serialized varchar(255), object3_label varchar(255), object3_reference_id bigint, object3_reference_type varchar(255), object3_serialized varchar(255), object4_label varchar(255), object4_reference_id bigint, object4_reference_type varchar(255), object4_serialized varchar(255), subject_label varchar(255), subject_reference_id bigint, subject_reference_type varchar(255), subject_serialized varchar(255), primary key (id));
create table Parameter (id bigint not null, name varchar(255) not null unique, stringValue varchar(255), primary key (id));
create table QueuedTaskHolder (id bigint not null, creationDate timestamp(6) with time zone not null, endDate timestamp(6) with time zone, name varchar(255) not null, queueId varchar(255), report varchar(32600), result varchar(255) check (result in ('SUCCESS','WARN','ERROR','FATAL')), serializedTask varchar(32600) not null, stackTrace varchar(32600), startDate timestamp(6) with time zone, status varchar(255) not null check (status in ('TO_RUN','RUNNING','COMPLETED','FAILED','INTERRUPTED','CANCELLED')), taskType varchar(255) not null, triggeringDate timestamp(6) with time zone, optLock integer, primary key (id));
create table TechnicalUser (id bigint not null, primary key (id));
create table user_ (id bigint not null, creationDate timestamp(6) with time zone not null, enabled boolean not null, lastLoginDate timestamp(6) with time zone, lastUpdateDate timestamp(6) with time zone not null, locale varchar(255), passwordHash varchar(255), username varchar(255) not null, email varchar(255), firstName varchar(255) not null, lastName varchar(255) not null, announcementInformation_lastActionDate timestamp(6) with time zone, announcementInformation_open boolean not null, passwordInformation_lastUpdateDate timestamp(6) with time zone, passwordRecoveryRequest_creationDate timestamp(6) with time zone, passwordRecoveryRequest_initiator varchar(255) check (passwordRecoveryRequest_initiator in ('USER','ADMIN')), passwordRecoveryRequest_token varchar(255), passwordRecoveryRequest_type varchar(255) check (passwordRecoveryRequest_type in ('CREATION','RESET')), primary key (id), unique (username));
create table user__Authority (user__id bigint not null, authorities_id bigint not null, primary key (user__id, authorities_id));
create table user__passwordInformation_history (user__id bigint not null, passwordInformation_history varchar(255), history_ORDER integer not null, primary key (user__id, history_ORDER));
create table user__UserGroup (users_id bigint not null, groups_id bigint not null, primary key (users_id, groups_id));
create table UserGroup (id bigint not null, description varchar(255), locked boolean not null, name varchar(255), primary key (id));
create table UserGroup_Authority (UserGroup_id bigint not null, authorities_id bigint not null, primary key (UserGroup_id, authorities_id));
create index idx_HistoryDifference_parentLog on HistoryDifference (parentLog_id);
create index idx_HistoryDifference_parentDifference on HistoryDifference (parentDifference_id);
alter table if exists Authority_customPermissionNames add constraint FK6uqor94s0128ryjrrdw84f67x foreign key (Authority_id) references Authority;
alter table if exists BasicUser add constraint FKhjnq1hls89k8qbs2hpap2i09j foreign key (id) references user_;
alter table if exists HistoryDifference add constraint FKbs6nv5pjsfuj7na52g16pfbrw foreign key (parentDifference_id) references HistoryDifference;
alter table if exists HistoryDifference add constraint FK77dlplmm50qgjbl1cqv4nrgoi foreign key (parentLog_id) references HistoryLog;
alter table if exists TechnicalUser add constraint FKq1c424ixlnmkb5c8w1bdddybj foreign key (id) references user_;
alter table if exists user__Authority add constraint FKhoyhws618rm4v2rjvm0x9uuhk foreign key (authorities_id) references Authority;
alter table if exists user__Authority add constraint FK1nrpbko4mct39gq143ef5jwq0 foreign key (user__id) references user_;
alter table if exists user__passwordInformation_history add constraint FKhhvmnfe1oakm04ad2k6xbrh59 foreign key (user__id) references user_;
alter table if exists user__UserGroup add constraint FKpctvagil9lsn2dovvt1fpfa5y foreign key (groups_id) references UserGroup;
alter table if exists user__UserGroup add constraint FKi09rq0mpjvl80ck9tglp995d6 foreign key (users_id) references user_;
alter table if exists UserGroup_Authority add constraint FK9gql8awj70oo2bgxupgcu9qxf foreign key (authorities_id) references Authority;
alter table if exists UserGroup_Authority add constraint FKrpwlh5niy92myi8fi0yiwr4ep foreign key (UserGroup_id) references UserGroup;