-- Hibernate hbm2ddl script
create sequence Announcement_id_seq start with 1 increment by 1;
create sequence City_id_seq start with 1 increment by 1;
create sequence DataUpgradeRecord_id_seq start with 1 increment by 1;
create sequence HistoryDifference_id_seq start with 1 increment by 1;
create sequence HistoryLog_id_seq start with 1 increment by 1;
create sequence Parameter_id_seq start with 1 increment by 1;
create sequence QueuedTaskHolder_id_seq start with 1 increment by 1;
create sequence Role_id_seq start with 1 increment by 1;
create sequence user__id_seq start with 1 increment by 1;
create table Announcement (id bigint not null, creation_date timestamp(6) with time zone not null, creation_subject_label text, creation_subject_reference_id bigint, creation_subject_reference_type varchar(255), creation_subject_serialized text, description_en varchar(255), description_fr varchar(255), enabled boolean not null, interruption_endDateTime timestamp(6), interruption_startDateTime timestamp(6), modification_date timestamp(6) with time zone not null, modification_subject_label text, modification_subject_reference_id bigint, modification_subject_reference_type varchar(255), modification_subject_serialized text, publication_endDateTime timestamp(6) not null, publication_startDateTime timestamp(6) not null, title_en varchar(255), title_fr varchar(255), type varchar(255) not null check (type in ('SERVICE_INTERRUPTION','OTHER')), primary key (id));
create table City (id bigint not null, deleteable boolean not null, disableable boolean not null, editable boolean not null, enabled boolean not null, position integer not null, label_en varchar(255), label_fr varchar(255), postalCode varchar(255) not null, primary key (id), unique (label_fr, postalcode));
create table DataUpgradeRecord (id bigint not null, autoPerform boolean not null, done boolean not null, executionDate timestamp(6) with time zone, name varchar(255) not null, primary key (id), unique (name));
create table HistoryDifference (id bigint not null, after_label text, after_reference_id bigint, after_reference_type varchar(255), after_serialized text, before_label text, before_reference_id bigint, before_reference_type varchar(255), before_serialized text, eventType varchar(255) not null check (eventType in ('ADDED','UPDATED','REMOVED','UNTOUCHED')), path_key_label text, path_key_reference_id bigint, path_key_reference_type varchar(255), path_key_serialized text, path_path bytea not null, parentDifference_id bigint, parentLog_id bigint, differences_ORDER integer, primary key (id));
create table HistoryLog (id bigint not null, comment text, date timestamp(6) with time zone not null, eventType varchar(255) not null check (eventType in ('CREATE','UPDATE','DELETE','DISABLE','ENABLE','SIGN_IN','SIGN_IN_FAIL','PASSWORD_RESET_REQUEST','PASSWORD_CREATION_REQUEST','PASSWORD_UPDATE')), mainObject_label text, mainObject_reference_id bigint, mainObject_reference_type varchar(255), mainObject_serialized text, object1_label text, object1_reference_id bigint, object1_reference_type varchar(255), object1_serialized text, object2_label text, object2_reference_id bigint, object2_reference_type varchar(255), object2_serialized text, object3_label text, object3_reference_id bigint, object3_reference_type varchar(255), object3_serialized text, object4_label text, object4_reference_id bigint, object4_reference_type varchar(255), object4_serialized text, subject_label text, subject_reference_id bigint, subject_reference_type varchar(255), subject_serialized text, primary key (id));
create table Parameter (id bigint not null, name varchar(255) not null unique, stringValue text, primary key (id));
create table QueuedTaskHolder (id bigint not null, creationDate timestamp(6) with time zone not null, endDate timestamp(6) with time zone, name varchar(255) not null, queueId varchar(255), report text, result varchar(255) check (result in ('SUCCESS','WARN','ERROR','FATAL')), serializedTask text not null, stackTrace text, startDate timestamp(6) with time zone, status varchar(255) not null check (status in ('TO_RUN','RUNNING','COMPLETED','FAILED','INTERRUPTED','CANCELLED')), taskType varchar(255) not null, triggeringDate timestamp(6) with time zone, optLock integer, primary key (id));
create table Role (id bigint not null, title varchar(255) not null unique, primary key (id));
create table Role_permissions (Role_id bigint not null, permissions varchar(255));
create table user_ (id bigint not null, announcementInformation_lastActionDate timestamp(6) with time zone, announcementInformation_open boolean not null, creationDate timestamp(6) with time zone not null, emailAddress varchar(255), enabled boolean not null, firstName varchar(255) not null, lastLoginDate timestamp(6) with time zone, lastName varchar(255) not null, lastUpdateDate timestamp(6) with time zone not null, locale varchar(255), passwordHash varchar(255), passwordInformation_lastUpdateDate timestamp(6) with time zone, passwordRecoveryRequest_creationDate timestamp(6) with time zone, passwordRecoveryRequest_initiator varchar(255) check (passwordRecoveryRequest_initiator in ('USER','ADMIN')), passwordRecoveryRequest_token varchar(255), passwordRecoveryRequest_type varchar(255) check (passwordRecoveryRequest_type in ('CREATION','RESET')), type varchar(255) not null check (type in ('BASIC','TECHNICAL')), username varchar(255) not null, primary key (id), unique (username));
create table user__passwordInformation_history (user__id bigint not null, passwordInformation_history varchar(255), history_ORDER integer not null, primary key (user__id, history_ORDER));
create table user__Role (users_id bigint not null, roles_id bigint not null, primary key (users_id, roles_id));
create index idx_HistoryDifference_parentLog on HistoryDifference (parentLog_id);
create index idx_HistoryDifference_parentDifference on HistoryDifference (parentDifference_id);
create index user__role_role_id_idx on user__Role (roles_id);
alter table if exists HistoryDifference add constraint FKbs6nv5pjsfuj7na52g16pfbrw foreign key (parentDifference_id) references HistoryDifference;
alter table if exists HistoryDifference add constraint FK77dlplmm50qgjbl1cqv4nrgoi foreign key (parentLog_id) references HistoryLog;
alter table if exists Role_permissions add constraint FK1r7f38f77hj0tgnruphe4t90m foreign key (Role_id) references Role;
alter table if exists user__passwordInformation_history add constraint FKhhvmnfe1oakm04ad2k6xbrh59 foreign key (user__id) references user_;
alter table if exists user__Role add constraint FKrlkperdervjn1pk1uqlmniup foreign key (roles_id) references Role;
alter table if exists user__Role add constraint FK8cno5ok6839ygx5op7mpw99ib foreign key (users_id) references user_;

-- Hibernate hbm2ddl script (end)
